grammar Datalog;

/********************************************************
* Productions
********************************************************/

datalogProgram	->	SCHEMES COLON scheme schemeList
FACTS COLON factList
RULES COLON ruleList
QUERIES COLON query queryList


scheme   	-> 	ID LEFT_PAREN ID idList RIGHT_PAREN


schemeList	->	scheme schemeList | lambda


idList  	->	COMMA ID idList | lambda


fact    	-> 	ID LEFT_PAREN STRING stringList RIGHT_PAREN PERIOD


factList	->	fact factList | lambda


rule    	->	headPredicate COLON_DASH predicate predicateList PERIOD


ruleList	->	rule ruleList | lambda


headPredicate	->	ID LEFT_PAREN ID idList RIGHT_PAREN


predicate	->	ID LEFT_PAREN parameter parameterList RIGHT_PAREN


predicateList	->	COMMA predicate predicateList | lambda


parameter	->	STRING | ID | expression


parameterList	-> 	COMMA parameter parameterList | lambda


expression	-> 	LEFT_PAREN parameter operator parameter RIGHT_PAREN


operator	->	ADD | MULTIPLY


query	        ->      predicate Q_MARK


queryList	->	query queryList | lambda


stringList	->	COMMA STRING stringList | lambda


/********************************************************
* Token definitions from the lexer project
* IGNORE: INCLUDED FOR COMPLETENESS FOR ANTLR
********************************************************/

COMMA 	:	','
;

PERIOD	:	'.'
;

Q_MARK	:	'?'
;

LEFT_PAREN	: '('
;

RIGHT_PAREN	: ')'
;

COLON		: ':'
;

COLON_DASH	: ':-'
;

MULTIPLY	: '*'
;

ADD		: '+'
;

SCHEMES		: 'Schemes'
;
FACTS		: 'Facts'
;
RULES		: 'Rules'
;
QUERIES		: 'Queries'
;

ID  :	('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9')*
;

STRING
:  '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\''
;

COMMENT
:   '#' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
|   '#|' ( options {greedy=false;} : . )* '|#' {$channel=HIDDEN;}
;

WS  :   ( ' '
| '\t'
| '\r'
| '\n'
) {$channel=HIDDEN;}
;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
:   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
|   UNICODE_ESC
|   OCTAL_ESC
;

fragment
OCTAL_ESC
:   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
|   '\\' ('0'..'7') ('0'..'7')
|   '\\' ('0'..'7')
;

fragment
UNICODE_ESC
:   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
;